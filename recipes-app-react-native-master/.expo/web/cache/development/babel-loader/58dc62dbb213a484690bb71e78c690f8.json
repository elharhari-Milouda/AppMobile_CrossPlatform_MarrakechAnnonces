{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport DrawerItem from \"./DrawerItem\";\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var buildLink = useLinkBuilder();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n      drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n      drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n      drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon,\n        drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n        drawerItemStyle = _descriptors$route$ke.drawerItemStyle;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: function onPress() {\n        navigation.dispatch(_objectSpread(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate({\n          name: route.name,\n          merge: true\n        })), {}, {\n          target: state.key\n        }));\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";;;;;;AAAA,SACEA,aADF,EAEEC,aAFF,EAKEC,cALF,QAMO,0BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,UAAP;AAWA,eAAe,SAASC,cAAT,OAIL;EAAA,IAHRC,KAGQ,QAHRA,KAGQ;EAAA,IAFRC,UAEQ,QAFRA,UAEQ;EAAA,IADRC,WACQ,QADRA,WACQ;EACR,IAAMC,SAAS,GAAGP,cAAc,EAAhC;EAEA,IAAMQ,YAAY,GAAGJ,KAAK,CAACK,MAANL,CAAaA,KAAK,CAACM,KAAnBN,CAArB;EACA,IAAMO,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAd,CAArC;EACA,IAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAzC;EALQ,IAQNC,qBARM,GAYJF,cAZI,CAQNE,qBARM;EAAA,IASNC,uBATM,GAYJH,cAZI,CASNG,uBATM;EAAA,IAUNC,2BAVM,GAYJJ,cAZI,CAUNI,2BAVM;EAAA,IAWNC,6BAXM,GAYJL,cAZI,CAWNK,6BAXM;EAcR,OAAOd,KAAK,CAACK,MAANL,CAAae,GAAbf,CAAiB,UAACgB,KAAD,EAAQC,CAAR,EAAc;IACpC,IAAMC,OAAO,GAAGD,CAAC,KAAKjB,KAAK,CAACM,KAA5B;IADoC,4BAQhCJ,WAAW,CAACc,KAAK,CAACR,GAAP,CAAXN,CAAuBQ,OARS;IAAA,IAGlCS,KAHkC,yBAGlCA,KAHkC;IAAA,IAIlCC,WAJkC,yBAIlCA,WAJkC;IAAA,IAKlCC,UALkC,yBAKlCA,UALkC;IAAA,IAMlCC,gBANkC,yBAMlCA,gBANkC;IAAA,IAOlCC,eAPkC,yBAOlCA,eAPkC;IAUpC,OACE1B,oBAACC,UAAD;MACEU,GAAG,EAAEQ,KAAK,CAACR,GADb;MAEEgB,KAAK,EACHJ,WAAW,KAAKK,SAAhBL,GACIA,WADJA,GAEID,KAAK,KAAKM,SAAVN,GACAA,KADAA,GAEAH,KAAK,CAACU,IAPd;MASEC,IAAI,EAAEN,UATR;MAUEH,OAAO,EAAEA,OAVX;MAWEU,eAAe,EAAEjB,qBAXnB;MAYEkB,iBAAiB,EAAEjB,uBAZrB;MAaEkB,qBAAqB,EAAEjB,2BAbzB;MAcEkB,uBAAuB,EAAEjB,6BAd3B;MAeEkB,UAAU,EAAEV,gBAfd;MAgBEW,KAAK,EAAEV,eAhBT;MAiBEW,EAAE,EAAE/B,SAAS,CAACa,KAAK,CAACU,IAAP,EAAaV,KAAK,CAACmB,MAAnB,CAjBf;MAkBEC,OAAO,EAAE,mBAAM;QACbnC,UAAU,CAACoC,QAAXpC,iCACMiB,OAAO,GACPvB,aAAa,CAAC2C,WAAd3C,EADO,GAEPD,aAAa,CAAC6C,QAAd7C,CAAuB;UAAEgC,IAAI,EAAEV,KAAK,CAACU,IAAd;UAAoBc,KAAK,EAAE;QAA3B,CAAvB9C,CAHNO;UAIEwC,MAAM,EAAEzC,KAAK,CAACQ;QAJhBP;MAMD;IAzBH,EADF;EAVK,EAAP;AAwCD","names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","label","undefined","name","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","labelStyle","style","to","params","onPress","dispatch","closeDrawer","navigate","merge","target"],"sources":["DrawerItemList.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate({ name: route.name, merge: true })),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}