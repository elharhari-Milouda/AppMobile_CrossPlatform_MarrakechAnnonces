{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport checkDuplicateRouteNames from \"./checkDuplicateRouteNames\";\nimport checkSerializable from \"./checkSerializable\";\nimport { NOT_INITIALIZED_ERROR } from \"./createNavigationContainerRef\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport findFocusedRoute from \"./findFocusedRoute\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationContainerRefContext from \"./NavigationContainerRefContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport useChildListeners from \"./useChildListeners\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport { ScheduleUpdateContext } from \"./useScheduleUpdate\";\nimport useSyncState from \"./useSyncState\";\nvar serializableWarnings = [];\nvar duplicateNameWarnings = [];\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = _objectWithoutProperties(state, [\"key\", \"routeNames\"]);\n\n  return _objectSpread(_objectSpread({}, partialState), {}, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      onUnhandledAction = _ref.onUnhandledAction,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = useSyncState(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = _slicedToArray(_useSyncState, 5),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2],\n      scheduleUpdate = _useSyncState2[3],\n      flushUpdates = _useSyncState2[4];\n\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  var _useChildListeners = useChildListeners(),\n      listeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var dispatch = React.useCallback(function (action) {\n    if (listeners.focus[0] == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(action);\n      });\n    }\n  }, [listeners.focus]);\n  var canGoBack = React.useCallback(function () {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$focus$.result,\n        handled = _listeners$focus$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n\n    if (target == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.reset(state)), {}, {\n          target: target\n        }));\n      });\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n\n    if (state == null) {\n      return undefined;\n    }\n\n    var route = findFocusedRoute(state);\n    return route;\n  }, [getRootState]);\n  var emitter = useEventEmitter();\n\n  var _useOptionsGetters = useOptionsGetters({}),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n\n  var navigation = React.useMemo(function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(CommonActions[name].apply(CommonActions, arguments));\n      };\n\n      return acc;\n    }, {})), emitter.create('root')), {}, {\n      dispatch: dispatch,\n      resetRoot: resetRoot,\n      isFocused: function isFocused() {\n        return true;\n      },\n      canGoBack: canGoBack,\n      getParent: function getParent() {\n        return undefined;\n      },\n      getState: function getState() {\n        return stateRef.current;\n      },\n      getRootState: getRootState,\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions,\n      isReady: function isReady() {\n        return listeners.focus[0] != null;\n      }\n    });\n  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, function () {\n    return navigation;\n  }, [navigation]);\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var stackRef = React.useRef();\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  var stateRef = React.useRef(state);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(function () {\n    var hydratedState = getRootState();\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        var serializableResult = checkSerializable(hydratedState);\n\n        if (!serializableResult.serializable) {\n          var location = serializableResult.location,\n              reason = serializableResult.reason;\n          var path = '';\n          var pointer = hydratedState;\n          var params = false;\n\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \" + curr;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\" + curr + \"]\";\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\" + curr;\n              } else {\n                path += \"[\" + JSON.stringify(curr) + \"]\";\n              }\n            }\n          }\n\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\" + path + \" (\" + reason + \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";\n\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n\n        var duplicateRouteNamesResult = checkDuplicateRouteNames(hydratedState);\n\n        if (duplicateRouteNamesResult.length) {\n          var _message = \"Found screens with the same name nested inside one another. Check:\\n\" + duplicateRouteNamesResult.map(function (locations) {\n            return \"\\n\" + locations.join(', ');\n          }) + \"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";\n\n          if (!duplicateNameWarnings.includes(_message)) {\n            duplicateNameWarnings.push(_message);\n            console.warn(_message);\n          }\n        }\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    var payload = action.payload;\n    var message = \"The action '\" + action.type + \"'\" + (payload ? \" with payload \" + JSON.stringify(action.payload) : '') + \" was not handled by any navigator.\";\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\" + payload.name + \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(NavigationContainerRefContext.Provider, {\n    value: navigation\n  }, React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(EnsureSingleNavigator, null, children))))));\n\n  if (independent) {\n    element = React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"mappings":"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","names":["CommonActions","React","checkDuplicateRouteNames","checkSerializable","NOT_INITIALIZED_ERROR","EnsureSingleNavigator","findFocusedRoute","NavigationBuilderContext","NavigationContainerRefContext","NavigationContext","NavigationRouteContext","NavigationStateContext","UnhandledActionContext","useChildListeners","useEventEmitter","useKeyedChildListeners","useOptionsGetters","ScheduleUpdateContext","useSyncState","serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","forwardRef","ref","initialState","onStateChange","onUnhandledAction","independent","children","parent","useContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","navigation","canGoBack","result","handled","resetRoot","target","root","_keyedListeners$getSt","reset","getRootState","_keyedListeners$getSt3","getCurrentRoute","emitter","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","locations","join","defaultOnUnhandledAction","payload","element","Provider","value"],"sources":["BaseNavigationContainer.tsx"],"sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}