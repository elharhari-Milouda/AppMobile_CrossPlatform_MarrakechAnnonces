{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nfunction DrawerViewBase(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      defaultStatus = _ref2.defaultStatus,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, props);\n  } : _ref2$drawerContent,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n      _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n      useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !global.nativeCallSyncHook || !function () {\n    var _Animated$isConfigure;\n\n    return (_Animated$isConfigure = Animated.isConfigured) === null || _Animated$isConfigure === void 0 ? void 0 : _Animated$isConfigure.call(Animated);\n  }() : _ref2$useLegacyImplem;\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n      _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n      drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n      _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n      drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n      _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n      drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n      drawerStyle = _descriptors$focusedR.drawerStyle,\n      _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n      drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n    ios: 'slide',\n    default: 'front'\n  }) : _descriptors$focusedR5,\n      gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n      _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n      keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n      _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n      overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n      _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n      swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n      _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n      swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n      _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n      swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;\n\n  var _React$useState = React.useState([focusedRouteKey]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n\n  var dimensions = useSafeAreaFrame();\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n\n    return function () {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$l = _descriptor$options.lazy,\n          lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n          unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options2 = descriptor.options,\n          _descriptor$options2$ = _descriptor$options2.header,\n          header = _descriptor$options2$ === void 0 ? function (_ref3) {\n        var layout = _ref3.layout,\n            options = _ref3.options;\n\n        var _options$headerLeft;\n\n        return React.createElement(Header, _extends({}, options, {\n          layout: layout,\n          title: getHeaderTitle(options, route.name),\n          headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : function (props) {\n            return React.createElement(DrawerToggleButton, props);\n          }\n        }));\n      } : _descriptor$options2$,\n          sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: descriptor.options.headerShown,\n        headerTransparent: descriptor.options.headerTransparent,\n        headerStatusBarHeight: descriptor.options.headerStatusBarHeight,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\n\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n      rest = _objectWithoutProperties(_ref4, [\"navigation\"]);\n\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","Animated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerViewBase","state","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","global","nativeCallSyncHook","isConfigured","_Animated$isConfigure","Drawer","require","default","focusedRouteKey","routes","index","key","options","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","useState","loaded","setLoaded","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","renderDrawerContent","Provider","value","renderSceneContent","enabled","style","styles","content","map","route","descriptor","lazy","unmountOnBlur","header","layout","title","name","headerLeft","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","visible","focused","headerShown","headerTransparent","headerStatusBarHeight","render","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","rest","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Running in chrome debugger\n  // @ts-expect-error\n  useLegacyImplementation = !global.nativeCallSyncHook ||\n    // Reanimated 2 is not configured\n    // @ts-expect-error: the type definitions are incomplete\n    !Animated.isConfigured?.(),\n}: Props) {\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerTransparent={descriptor.options.headerTransparent}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}